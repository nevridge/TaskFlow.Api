name: Deploy to Azure Production

on:
  workflow_dispatch: {}
  push:
    tags:
      - 'v*'

permissions:
  id-token: write
  contents: read

env:
  RESOURCE_GROUP: TaskFlowRG
  WEBAPP_NAME: taskflowapi2074394909
  ACR_NAME: taskflowregistry
  ACR_IMAGE_NAME: taskflowapi9
  APP_SERVICE_PLAN: TaskFlowAppServicePlan
  LOCATION: eastus

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Verify and set subscription
        run: |
          az account show
          SUB_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.subscriptionId // empty')
          if [ -n "$SUB_ID" ]; then
            echo "Setting subscription to $SUB_ID"
            az account set --subscription "$SUB_ID"
            az account show
          else
            echo "No subscriptionId in AZURE_CREDENTIALS, using default"
          fi

      - name: Ensure resource group exists
        run: |
          if az group show -n ${{ env.RESOURCE_GROUP }} >/dev/null 2>&1; then
            echo "Resource group ${{ env.RESOURCE_GROUP }} exists"
          else
            echo "Creating resource group ${{ env.RESOURCE_GROUP }}"
            az group create -n ${{ env.RESOURCE_GROUP }} -l ${{ env.LOCATION }}
          fi

      - name: Ensure ACR exists
        run: |
          if az acr show -n ${{ env.ACR_NAME }} -g ${{ env.RESOURCE_GROUP }} >/dev/null 2>&1; then
            echo "ACR ${{ env.ACR_NAME }} exists"
          else
            echo "Creating ACR ${{ env.ACR_NAME }}"
            az acr create -n ${{ env.ACR_NAME }} -g ${{ env.RESOURCE_GROUP }} --sku Basic --admin-enabled true
          fi

      - name: Build and push Docker image to ACR
        run: |
          az acr build \
            --registry ${{ env.ACR_NAME }} \
            --image ${{ env.ACR_IMAGE_NAME }}:latest \
            --image ${{ env.ACR_IMAGE_NAME }}:${{ github.sha }} \
            --file TaskFlow.Api/Dockerfile \
            .

      - name: Ensure App Service Plan exists
        run: |
          if az appservice plan show -n ${{ env.APP_SERVICE_PLAN }} -g ${{ env.RESOURCE_GROUP }} >/dev/null 2>&1; then
            echo "App Service Plan ${{ env.APP_SERVICE_PLAN }} exists"
          else
            echo "Creating App Service Plan ${{ env.APP_SERVICE_PLAN }}"
            az appservice plan create \
              -n ${{ env.APP_SERVICE_PLAN }} \
              -g ${{ env.RESOURCE_GROUP }} \
              --is-linux \
              --sku B1
          fi

      - name: Ensure Web App exists
        run: |
          if az webapp show -n ${{ env.WEBAPP_NAME }} -g ${{ env.RESOURCE_GROUP }} >/dev/null 2>&1; then
            echo "Web App ${{ env.WEBAPP_NAME }} exists"
          else
            echo "Creating Web App ${{ env.WEBAPP_NAME }}"
            az webapp create \
              -n ${{ env.WEBAPP_NAME }} \
              -g ${{ env.RESOURCE_GROUP }} \
              --plan ${{ env.APP_SERVICE_PLAN }} \
              --deployment-container-image-name ${{ env.ACR_NAME }}.azurecr.io/${{ env.ACR_IMAGE_NAME }}:latest
          fi

      - name: Enable system-assigned identity
        run: |
          az webapp identity assign \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.WEBAPP_NAME }}

      - name: Get webapp managed identity principal ID
        id: get_principal
        run: |
          principalId=$(az webapp show \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.WEBAPP_NAME }} \
            --query identity.principalId -o tsv)
          echo "PRINCIPAL_ID=$principalId" >> $GITHUB_ENV

      - name: Grant AcrPull role to webapp identity
        continue-on-error: true
        run: |
          az role assignment create \
            --assignee ${{ env.PRINCIPAL_ID }} \
            --role AcrPull \
            --scope $(az acr show --name ${{ env.ACR_NAME }} --query id -o tsv) || true

      - name: Configure webapp to use managed identity for ACR
        run: |
          az resource update \
            --ids /subscriptions/$(az account show --query id -o tsv)/resourceGroups/${{ env.RESOURCE_GROUP }}/providers/Microsoft.Web/sites/${{ env.WEBAPP_NAME }}/config/web \
            --set properties.acrUseManagedIdentityCreds=true

      - name: Set the container image
        run: |
          az webapp config container set \
            --name ${{ env.WEBAPP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --container-image-name ${{ env.ACR_NAME }}.azurecr.io/${{ env.ACR_IMAGE_NAME }}:latest \
            --container-registry-url https://${{ env.ACR_NAME }}.azurecr.io

      - name: Restart webapp
        run: |
          az webapp restart \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.WEBAPP_NAME }}

      - name: Verify health check
        run: |
          echo "Waiting for app to restart..."
          sleep 30
          echo "Checking health endpoint..."
          for i in {1..10}; do
            status=$(curl -s -o /dev/null -w '%{http_code}' --max-time 10 https://${{ env.WEBAPP_NAME }}.azurewebsites.net/health || echo "000")
            echo "Health check status: $status"
            if [ "$status" = "200" ]; then
              echo "Health check passed"
              exit 0
            fi
            echo "Attempt $i failed, retrying..."
            sleep 5
          done
          echo "Health check failed after 10 attempts"
          exit 1