name: Build
on: [push, pull_request]
jobs:
  lint:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - run: dotnet format --verify-no-changes
  build:
    needs: lint
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - run: dotnet build --configuration Release
  test:
    needs: lint
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - name: Run tests with coverage
        run: dotnet test --configuration Release /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=./TestResults/coverage.cobertura.xml /p:Exclude="[xunit.*]*%2c[TaskFlow.Api]TaskFlow.Api.Program%2c[TaskFlow.Api]TaskFlow.Api.Migrations.*%2c[TaskFlow.Api]TaskFlow.Api.Middleware.*"
      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool
      - name: Generate coverage report
        run: reportgenerator -reports:"**/TestResults/coverage.cobertura.xml" -targetdir:"coveragereport" -reporttypes:"TextSummary;Html"
      - name: Display coverage summary
        run: cat coveragereport/Summary.txt
  smoke-test:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Start application with docker-compose
        run: docker compose up -d
      - name: Wait for application to be healthy
        run: |
          echo "Waiting for application to be ready..."
          for i in {1..30}; do
            status=$(curl -s -o /dev/null -w '%{http_code}' http://localhost:8080/health || echo "000")
            echo "Attempt $i: Health check status: $status"
            if [ "$status" = "200" ]; then
              echo "Application is healthy!"
              exit 0
            fi
            sleep 2
          done
          echo "Application failed to become healthy"
          docker compose logs
          exit 1
      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          
          # Test 1: Health endpoint should return 200
          echo "Test 1: Verifying /health endpoint"
          curl -f http://localhost:8080/health || exit 1
          
          # Test 2: Health endpoint should return valid JSON with status
          echo "Test 2: Verifying health response format"
          health_response=$(curl -s http://localhost:8080/health)
          echo "$health_response" | jq -e '.status == "Healthy"' || exit 1
          
          # Test 3: Ready endpoint should return 200
          echo "Test 3: Verifying /health/ready endpoint"
          curl -f http://localhost:8080/health/ready || exit 1
          
          # Test 4: Live endpoint should return 200
          echo "Test 4: Verifying /health/live endpoint"
          curl -f http://localhost:8080/health/live || exit 1
          
          # Test 5: API endpoint should be accessible
          echo "Test 5: Verifying API endpoint accessibility"
          api_response=$(curl -s -o /dev/null -w '%{http_code}' http://localhost:8080/api/TaskItems)
          if [ "$api_response" = "200" ] || [ "$api_response" = "204" ]; then
            echo "API endpoint is accessible (status: $api_response)"
          else
            echo "API endpoint returned unexpected status: $api_response"
            exit 1
          fi
          
          # Test 6: Basic CRUD operation
          echo "Test 6: Verifying basic CRUD operations"
          task_response=$(curl -s -X POST http://localhost:8080/api/TaskItems \
            -H "Content-Type: application/json" \
            -d '{"title": "Smoke Test Task", "description": "Integration test", "isComplete": false}')
          task_id=$(echo "$task_response" | jq -r '.id')
          echo "Created task with ID: $task_id"
          
          # Verify the task was created
          get_response=$(curl -s http://localhost:8080/api/TaskItems/$task_id)
          title=$(echo "$get_response" | jq -r '.title')
          if [ "$title" != "Smoke Test Task" ]; then
            echo "ERROR: CRUD test failed - title mismatch"
            exit 1
          fi
          echo "CRUD test passed - task created and retrieved successfully"
          
          echo "All smoke tests passed!"
      - name: Cleanup
        if: always()
        run: docker compose down -v
