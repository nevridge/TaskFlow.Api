name: Ephemeral ACI deploy - create test teardown

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'deploy or teardown'
        required: true
        default: 'deploy'
      resource_group:
        description: 'Resource group name (for teardown reuse)'
        required: false
        default: ''
      location:
        description: 'Azure location'
        required: false
        default: 'eastus'
      acr_name:
        description: 'ACR name (must be globally unique or same as production to reuse)'
        required: false
        default: ''
      image_tag:
        description: 'Image tag to build/use'
        required: false
        default: 'latest'

env:
  RESOURCE_GROUP_DEFAULT: TaskFlowRG
  ACR_NAME_DEFAULT: taskflowregistry

permissions:
  id-token: write
  contents: read

jobs:
  run-ephemeral:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Verify and set subscription
        run: |
          az account show
          SUB_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.subscriptionId // empty')
          if [ -n "$SUB_ID" ]; then
            echo "Setting subscription to $SUB_ID"
            az account set --subscription "$SUB_ID"
            az account show
          else
            echo "No subscriptionId in AZURE_CREDENTIALS, using default"
          fi

      - name: Register Azure Container Instances provider (if action=deploy)
        if: ${{ github.event.inputs.action == 'deploy' }}
        run: |
          echo "Registering Microsoft.ContainerInstance provider"
          az provider register --namespace Microsoft.ContainerInstance --wait || true
          az provider show --namespace Microsoft.ContainerInstance --query "registrationState" -o tsv

      - name: Compute names and set variables
        run: |
          RG_INPUT='${{ github.event.inputs.resource_group }}'
          ACR_INPUT='${{ github.event.inputs.acr_name }}'
          IMAGE_TAG='${{ github.event.inputs.image_tag }}'
          LOCATION='${{ github.event.inputs.location }}'

          if [ -n "$RG_INPUT" ]; then
            RESOURCE_GROUP="$RG_INPUT"
          else
            if [ -n "${{ env.RESOURCE_GROUP_DEFAULT }}" ]; then
              RESOURCE_GROUP="${{ env.RESOURCE_GROUP_DEFAULT }}"
            else
              RESOURCE_GROUP="taskflow-ephemeral-${GITHUB_RUN_ID}"
            fi
          fi

          if [ -n "$ACR_INPUT" ]; then
            ACR_NAME="$ACR_INPUT"
          else
            if [ -n "${{ env.ACR_NAME_DEFAULT }}" ]; then
              ACR_NAME="${{ env.ACR_NAME_DEFAULT }}"
            else
              ACR_NAME="taskflowregistryephemeral${GITHUB_RUN_ID}"

            fi
          fi

          ACI_NAME="taskflow-aci-${GITHUB_RUN_ID}"

          echo "RESOURCE_GROUP=$RESOURCE_GROUP" >> $GITHUB_ENV
          echo "LOCATION=$LOCATION" >> $GITHUB_ENV
          echo "ACR_NAME=$ACR_NAME" >> $GITHUB_ENV
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "ACI_NAME=$ACI_NAME" >> $GITHUB_ENV

      - name: Ensure resource group exists (if action=deploy)
        if: ${{ github.event.inputs.action == 'deploy' }}
        run: |
          if az group show -n $RESOURCE_GROUP >/dev/null 2>&1; then
            echo "Resource group $RESOURCE_GROUP exists"
          else
            echo "Creating resource group $RESOURCE_GROUP"
            az group create -n $RESOURCE_GROUP -l $LOCATION
          fi

      - name: Ensure ACR exists (if action=deploy)
        if: ${{ github.event.inputs.action == 'deploy' }}
        run: |
          if az acr show -n $ACR_NAME -g $RESOURCE_GROUP >/dev/null 2>&1; then
            echo "ACR $ACR_NAME already exists"
          else
            echo "Creating ACR $ACR_NAME in $RESOURCE_GROUP"
            az acr create -n $ACR_NAME -g $RESOURCE_GROUP --sku Basic --admin-enabled true
          fi

      - name: Build and push image to ACR (if action=deploy)
        if: ${{ github.event.inputs.action == 'deploy' }}
        run: |
          az acr build --registry $ACR_NAME --image taskflowapi:${IMAGE_TAG} --file TaskFlow.Api/Dockerfile .

      - name: Create ACI from ACR image (if action=deploy)
        if: ${{ github.event.inputs.action == 'deploy' }}
        run: |
          az container create \
            --resource-group $RESOURCE_GROUP \
            --name $ACI_NAME \
            --image $ACR_NAME.azurecr.io/taskflowapi:${IMAGE_TAG} \
            --registry-login-server $ACR_NAME.azurecr.io \
            --registry-username $(az acr credential show -n $ACR_NAME --query username -o tsv) \
            --registry-password $(az acr credential show -n $ACR_NAME --query "passwords[0].value" -o tsv) \
            --cpu 1 --memory 1.5 \
            --os-type Linux \
            --ports 8080 \
            --dns-name-label taskflow-aci-${GITHUB_RUN_ID}

      - name: Wait for ACI to be ready and print FQDN (if action=deploy)
        if: ${{ github.event.inputs.action == 'deploy' }}
        run: |
          for i in {1..30}; do
            fqdn=$(az container show -g $RESOURCE_GROUP -n $ACI_NAME --query ipAddress.fqdn -o tsv)
            if [ -n "$fqdn" ] && [ "$fqdn" != "null" ]; then
              echo "FQDN=$fqdn" >> $GITHUB_ENV
              echo "Container FQDN: $fqdn"
              break
            fi
            echo "Waiting for ACI..."
            sleep 5
          done
          if [ -z "$fqdn" ] || [ "$fqdn" = "null" ]; then
            echo "Error: FQDN was not obtained after waiting for ACI. Exiting."
            exit 1
          fi

      - name: Smoke test HTTP (if action=deploy)
        if: ${{ github.event.inputs.action == 'deploy' }}
        run: |
          echo "Testing http://$FQDN:8080/"
          for i in {1..10}; do
            status=$(curl -s -o /dev/null -w '%{http_code}' --max-time 5 http://$FQDN:8080/)
            echo "HTTP status: $status"
            if [ "$status" = "200" ] || [ "$status" = "404" ]; then
              echo "App responded (status $status)"
              exit 0
            fi
            sleep 3
          done
          echo "Smoke test failed"
          exit 1

      - name: Teardown resource group (if action=teardown)
        if: ${{ github.event.inputs.action == 'teardown' }}
        run: |
          RG_TO_DELETE='${{ github.event.inputs.resource_group }}'
          if [ -z "$RG_TO_DELETE" ]; then
            RG_TO_DELETE="${{ env.RESOURCE_GROUP }}"
          fi
          echo "Deleting resource group: $RG_TO_DELETE"
          az group delete -n "$RG_TO_DELETE" --yes --no-wait